import { GoogleGenerativeAI } from "@google/generative-ai";
import { NextRequest, NextResponse } from "next/server";
import mysql from "mysql2/promise";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

const dbConfig = {
  host: "localhost",
  user: "root",
  password: "baodang123",
  database: "inventory_db",
  port: 3306,
};

const SCHEMA_INFO = `
Database: inventory_db
Table: inventory_item
Columns:
- id (int): ID s·∫£n ph·∫©m
- product_name (varchar): T√™n s·∫£n ph·∫©m
- initial_stock (int): S·ªë l∆∞·ª£ng ban ƒë·∫ßu
- delay_days (int): S·ªë ng√†y delay
- remaining_quantity (int): S·ªë l∆∞·ª£ng c√≤n l·∫°i
- replenish_date (date): Ng√†y b·ªï sung h√†ng
- prediction (varchar): D·ª± b√°o t√¨nh h√¨nh
`;

function getQueryType(
  query: string
): "inventory_query" | "statistics" | "normal_query" {
  const queryLower = query.toLowerCase();

  // üîç LOG: In ra query g·ªëc v√† query ƒë√£ lowercase
  console.log("üîç Original query:", query);
  console.log("üîç Lowercase query:", queryLower);

  const inventoryKeywords = [
    "s·∫£n ph·∫©m n√†o",
    "hi·ªÉn th·ªã s·∫£n ph·∫©m",
    "t√¨m s·∫£n ph·∫©m",
    "s·∫£n ph·∫©m c√≥",
    "danh s√°ch s·∫£n ph·∫©m",
    "th√¥ng tin s·∫£n ph·∫©m",
    "chi ti·∫øt s·∫£n ph·∫©m",
    "s·∫Øp h·∫øt h√†ng",
    "c√≤n l·∫°i",
    "delay nh·∫•t",
    "t√™n s·∫£n ph·∫©m",
    "id s·∫£n ph·∫©m",
    "hi·ªÉn th·ªã t·∫•t c·∫£",
    "show all",
    "t·∫•t c·∫£ s·∫£n ph·∫©m",
    "list s·∫£n ph·∫©m",
  ];

  const statisticsKeywords = [
    "th·ªëng k√™",
    "b√°o c√°o",
    "t·ªïng s·ªë",
    "s·ªë l∆∞·ª£ng t·ªïng",
    "trung b√¨nh",
    "t·ª∑ l·ªá",
    "ph·∫ßn trƒÉm",
    "bi·ªÉu ƒë·ªì",
    "ph√¢n t√≠ch",
    "xu h∆∞·ªõng",
    "so s√°nh",
    "t·ªïng c·ªông",
    "t·ªïng h·ª£p",
    "ƒë·∫øm s·ªë",
    "count",
    "sum",
    "avg",
    "average",
    "statistics",
    "report",
    "analysis",
    "chart",
    "graph",
  ];

  // üîç LOG: Ki·ªÉm tra t·ª´ng lo·∫°i keyword
  const matchedStatistics = statisticsKeywords.filter((keyword) =>
    queryLower.includes(keyword)
  );
  const matchedInventory = inventoryKeywords.filter((keyword) =>
    queryLower.includes(keyword)
  );

  console.log("üìä Matched Statistics Keywords:", matchedStatistics);
  console.log("üì¶ Matched Inventory Keywords:", matchedInventory);

  if (matchedStatistics.length > 0) {
    console.log("‚úÖ Classified as: STATISTICS");
    return "statistics";
  }

  if (matchedInventory.length > 0) {
    console.log("‚úÖ Classified as: INVENTORY_QUERY");
    return "inventory_query";
  }

  const generalInventoryKeywords = [
    "h√†ng t·ªìn kho",
    "inventory",
    "kho",
    "stock",
    "t·ªìn kho",
    "h√†ng h√≥a",
    "b·ªï sung",
    "replenish",
    "d·ª± b√°o",
    "prediction",
    "h·∫øt h√†ng",
  ];

  const matchedGeneral = generalInventoryKeywords.filter((keyword) =>
    queryLower.includes(keyword)
  );
  console.log("üè™ Matched General Inventory Keywords:", matchedGeneral);

  if (matchedGeneral.length > 0) {
    console.log("‚úÖ Classified as: INVENTORY_QUERY (General)");
    return "inventory_query";
  }

  console.log("‚úÖ Classified as: NORMAL_QUERY (Default)");
  return "normal_query";
}

export async function POST(req: NextRequest) {
  let connection;

  try {
    const body = await req.json();
    const { query } = body;

    if (!query || typeof query !== "string") {
      return NextResponse.json(
        { result: "Truy v·∫•n kh√¥ng h·ª£p l·ªá." },
        { status: 400 }
      );
    }

    console.log("\n" + "=".repeat(50));
    console.log("üöÄ NEW REQUEST RECEIVED");
    console.log("=".repeat(50));

    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const queryType = getQueryType(query);

    console.log("üéØ FINAL QUERY TYPE:", queryType);
    console.log("=".repeat(50) + "\n");

    if (queryType === "inventory_query" || queryType === "statistics") {
      try {
        console.log("üíæ Attempting database connection...");
        connection = await mysql.createConnection(dbConfig);
        console.log("‚úÖ Database connected successfully");

        let sqlPrompt = "";

        if (queryType === "statistics") {
          console.log("üìä Processing STATISTICS query");
          sqlPrompt = `
          B·∫°n l√† m·ªôt chuy√™n gia SQL cho ph√¢n t√≠ch th·ªëng k√™. D·ª±a tr√™n schema database sau v√† c√¢u h·ªèi th·ªëng k√™ c·ªßa ng∆∞·ªùi d√πng, h√£y t·∫°o ra c√¢u truy v·∫•n SQL ph√π h·ª£p.

          ${SCHEMA_INFO}

          C√¢u h·ªèi th·ªëng k√™: "${query}"

          Y√™u c·∫ßu:
          1. Ch·ªâ tr·∫£ v·ªÅ c√¢u SQL query, kh√¥ng c√≥ text gi·∫£i th√≠ch kh√°c
          2. S·ª≠ d·ª•ng c√°c h√†m t·ªïng h·ª£p nh∆∞ COUNT, SUM, AVG, MAX, MIN
          3. S·ª≠ d·ª•ng GROUP BY khi c·∫ßn thi·∫øt ƒë·ªÉ ph√¢n nh√≥m d·ªØ li·ªáu
          4. C√≥ th·ªÉ s·ª≠ d·ª•ng HAVING ƒë·ªÉ l·ªçc k·∫øt qu·∫£ sau GROUP BY
          5. ƒê·∫£m b·∫£o syntax MySQL ch√≠nh x√°c
          6. Kh√¥ng s·ª≠ d·ª•ng DROP, DELETE, UPDATE - ch·ªâ SELECT
          7. N·∫øu c√¢u h·ªèi kh√¥ng th·ªÉ t·∫°o SQL, tr·∫£ v·ªÅ: "NO_SQL_NEEDED"

          V√≠ d·ª• th·ªëng k√™:
          - "T·ªïng s·ªë s·∫£n ph·∫©m" ‚Üí "SELECT COUNT(*) as total_products FROM inventory_item"
          - "Trung b√¨nh s·ªë l∆∞·ª£ng c√≤n l·∫°i" ‚Üí "SELECT AVG(remaining_quantity) as avg_remaining FROM inventory_item"
          - "T·ªïng s·ªë l∆∞·ª£ng h√†ng t·ªìn kho" ‚Üí "SELECT SUM(remaining_quantity) as total_stock FROM inventory_item"
          - "S·ªë s·∫£n ph·∫©m theo t·ª´ng m·ª©c delay" ‚Üí "SELECT delay_days, COUNT(*) as product_count FROM inventory_item GROUP BY delay_days"
          `;
        } else {
          console.log("üì¶ Processing INVENTORY_QUERY");
          sqlPrompt = `
          B·∫°n l√† m·ªôt chuy√™n gia SQL. D·ª±a tr√™n schema database sau v√† c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng, h√£y t·∫°o ra c√¢u truy v·∫•n SQL ph√π h·ª£p.

          ${SCHEMA_INFO}

          C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "${query}"

          Y√™u c·∫ßu:
          1. Ch·ªâ tr·∫£ v·ªÅ c√¢u SQL query, kh√¥ng c√≥ text gi·∫£i th√≠ch kh√°c
          2. S·ª≠ d·ª•ng SELECT statement ph√π h·ª£p
          3. N·∫øu c·∫ßn, s·ª≠ d·ª•ng WHERE, ORDER BY, GROUP BY, LIMIT
          4. ƒê·∫£m b·∫£o syntax MySQL ch√≠nh x√°c
          5. Kh√¥ng s·ª≠ d·ª•ng DROP, DELETE, UPDATE - ch·ªâ SELECT
          6. N·∫øu c√¢u h·ªèi kh√¥ng th·ªÉ t·∫°o SQL, tr·∫£ v·ªÅ: "NO_SQL_NEEDED"

          V√≠ d·ª•:
          - "Hi·ªÉn th·ªã t·∫•t c·∫£ s·∫£n ph·∫©m" ‚Üí "SELECT * FROM inventory_item"
          - "S·∫£n ph·∫©m n√†o s·∫Øp h·∫øt h√†ng?" ‚Üí "SELECT * FROM inventory_item WHERE remaining_quantity < 30"
          - "S·∫£n ph·∫©m n√†o delay nh·∫•t?" ‚Üí "SELECT * FROM inventory_item ORDER BY delay_days DESC LIMIT 1"
          `;
        }

        console.log("ü§ñ Generating SQL with Gemini...");
        const sqlResult = await model.generateContent(sqlPrompt);
        const sqlResponse = await sqlResult.response;
        const sqlQuery = sqlResponse
          .text()
          .trim()
          .replace(/```sql|```/g, "");

        console.log("üîç Generated SQL:", sqlQuery);

        if (
          sqlQuery === "NO_SQL_NEEDED" ||
          !sqlQuery.toUpperCase().startsWith("SELECT")
        ) {
          console.log(
            "‚ö†Ô∏è SQL not needed or invalid, falling back to normal query"
          );
          const normalResult = await model.generateContent(query);
          const normalResponse = await normalResult.response;
          return NextResponse.json({
            result: normalResponse.text(),
            type: "normal_query",
          });
        }

        console.log("üîç Executing SQL query...");
        const [rows] = await connection.execute(sqlQuery);
        console.log(
          "‚úÖ SQL executed successfully, rows returned:",
          Array.isArray(rows) ? rows.length : "Unknown"
        );

        let analysisPrompt = "";

        if (queryType === "statistics") {
          analysisPrompt = `
          D·ª±a tr√™n c√¢u h·ªèi th·ªëng k√™: "${query}"
          K·∫øt qu·∫£ th·ªëng k√™ t·ª´ database: ${JSON.stringify(rows)}

          H√£y t·∫°o m·ªôt b√°o c√°o th·ªëng k√™ chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
          Bao g·ªìm:
          1. T√≥m t·∫Øt k·∫øt qu·∫£ th·ªëng k√™ ch√≠nh
          2. Ph√¢n t√≠ch v√† gi·∫£i th√≠ch √Ω nghƒ©a c·ªßa c√°c con s·ªë
          3. So s√°nh ho·∫∑c ƒë√°nh gi√° xu h∆∞·ªõng n·∫øu c√≥
          4. ƒê∆∞a ra nh·∫≠n x√©t ho·∫∑c khuy·∫øn ngh·ªã d·ª±a tr√™n d·ªØ li·ªáu
          5. S·ª≠ d·ª•ng format d·ªÖ ƒë·ªçc v·ªõi s·ªë li·ªáu c·ª• th·ªÉ v√† bi·ªÉu t∆∞·ª£ng

          Kh√¥ng bao g·ªìm SQL query trong ph·∫£n h·ªìi.
          `;
        } else {
          analysisPrompt = `
          D·ª±a tr√™n c√¢u h·ªèi: "${query}"
          K·∫øt qu·∫£ t·ª´ database: ${JSON.stringify(rows)}

          H√£y t·∫°o m·ªôt ph·∫£n h·ªìi th√¢n thi·ªán v√† chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. 
          Bao g·ªìm:
          1. Tr·∫£ l·ªùi tr·ª±c ti·∫øp c√¢u h·ªèi
          2. T√≥m t·∫Øt c√°c th√¥ng tin quan tr·ªçng t·ª´ k·∫øt qu·∫£
          3. ƒê∆∞a ra nh·∫≠n x√©t ho·∫∑c khuy·∫øn ngh·ªã n·∫øu c·∫ßn
          4. S·ª≠ d·ª•ng format d·ªÖ ƒë·ªçc v·ªõi bullet points ho·∫∑c s·ªë li·ªáu c·ª• th·ªÉ

          Kh√¥ng bao g·ªìm SQL query trong ph·∫£n h·ªìi.
          `;
        }

        console.log("ü§ñ Generating analysis with Gemini...");
        const analysisResult = await model.generateContent(analysisPrompt);
        const analysisResponse = await analysisResult.response;

        console.log("‚úÖ Analysis generated successfully");
        console.log("üì§ Returning response with type:", queryType);

        return NextResponse.json({
          result: analysisResponse.text(),
          data: rows,
          type: queryType,
        });
      } catch (dbError: any) {
        console.error("‚ùå Database Error:", dbError);
        const fallbackResult = await model.generateContent(`
        C√¢u h·ªèi: ${query}
        
        C√≥ v·∫ª nh∆∞ b·∫°n ƒëang h·ªèi v·ªÅ h√†ng t·ªìn kho nh∆∞ng t√¥i kh√¥ng th·ªÉ truy c·∫≠p database l√∫c n√†y. 
        H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ki·ªÉm tra l·∫°i k·∫øt n·ªëi database.
        `);
        const fallbackResponse = await fallbackResult.response;

        return NextResponse.json({
          result:
            fallbackResponse.text() +
            "\n\n‚ö†Ô∏è L∆∞u √Ω: Kh√¥ng th·ªÉ k·∫øt n·ªëi database ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt.",
          type: "normal_query",
        });
      }
    } else {
      // Handle normal queries
      console.log("üí¨ Processing NORMAL_QUERY");
      const chatPrompt = `
      B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát:
      "${query}"

      L∆∞u √Ω: 
      - N·∫øu ng∆∞·ªùi d√πng ch√†o h·ªèi, h√£y ch√†o l·∫°i m·ªôt c√°ch th√¢n thi·ªán
      - N·∫øu h·ªèi v·ªÅ kh·∫£ nƒÉng c·ªßa b·∫°n, h√£y gi·∫£i th√≠ch b·∫°n c√≥ th·ªÉ chat th√¥ng th∆∞·ªùng, truy v·∫•n h√†ng t·ªìn kho v√† t·∫°o b√°o c√°o th·ªëng k√™
      - Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† t·ª± nhi√™n
      `;

      const chatResult = await model.generateContent(chatPrompt);
      const chatResponse = await chatResult.response;

      console.log("‚úÖ Normal chat response generated");
      console.log("üì§ Returning response with type: normal_query");

      return NextResponse.json({
        result: chatResponse.text(),
        type: "normal_query",
      });
    }
  } catch (error: any) {
    console.error("‚ùå Gemini API Error:", error);

    if (error?.message?.includes("404")) {
      return NextResponse.json(
        { result: "Model kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra t√™n model." },
        { status: 404 }
      );
    }

    if (error?.message?.includes("API_KEY")) {
      return NextResponse.json(
        { result: "API key kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu." },
        { status: 401 }
      );
    }

    return NextResponse.json(
      { result: `L·ªói: ${error?.message || "Kh√¥ng x√°c ƒë·ªãnh"}` },
      { status: 500 }
    );
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}
